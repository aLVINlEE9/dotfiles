local ls = require("luasnip")
local s = ls.snippet
local t = ls.text_node
local i = ls.insert_node

return {
	s(
		{
			trig = "hguard",
			name = "Header Guard",
			dscr = "C++ header guard with customizable name",
			snippetType = "autosnippet",
		},
		{
			t("#ifndef "),
			i(1, "HEADER_NAME_H"),
			t({ "", "#define " }),
			i(1),
			t({ "", "" }),
			i(2, "// Header content"),
			t({ "", "", "#endif // " }),
			i(1),
			i(0),
		}
	),
	s({
		trig = "class6",
		name = "Class with Big Six",
		dscr = "C++ class with constructor, destructor, copy/move operations",
	}, {
		t("class "),
		i(1, "ClassName"),
		t({ " {", "public:" }),
		-- 생성자
		t({ "", "\t" }),
		i(1),
		t("("),
		i(2, "parameters"),
		t(")"),
		t({ " {", "\t\t" }),
		i(3, "// Constructor body"),
		t({ "", "\t}" }),
		-- 소멸자
		t({ "", "\t~" }),
		i(1),
		t({ "() {", "\t\t" }),
		i(4, "// Destructor body"),
		t({ "", "\t}" }),
		-- 복사 생성자
		t({ "", "\t" }),
		i(1),
		t("(const "),
		i(1),
		t("& other)"),
		t({ " {", "\t\t" }),
		i(5, "// Copy constructor body"),
		t({ "", "\t}" }),
		-- 복사 대입 연산자
		t({ "", "\t" }),
		i(1),
		t("& operator=(const "),
		i(1),
		t("& other)"),
		t({ " {", "\t\t" }),
		i(6, "// Copy assignment body"),
		t({ "", "\t}" }),
		-- 이동 생성자
		t({ "", "\t" }),
		i(1),
		t("("),
		i(1),
		t("&& other) noexcept"),
		t({ " {", "\t\t" }),
		i(7, "// Move constructor body"),
		t({ "", "\t}" }),
		-- 이동 대입 연산자
		t({ "", "\t" }),
		i(1),
		t("& operator=("),
		i(1),
		t("&& other) noexcept"),
		t({ " {", "\t\t" }),
		i(8, "// Move assignment body"),
		t({ "", "\t}" }),
		-- 추가 멤버
		t({ "", "private:", "\t" }),
		i(9, "// Private members"),
		t({ "", "};" }),
		i(0),
	}),
	s({
		trig = "struct6",
		name = "Struct with Big Six",
		dscr = "C++ struct with constructor, destructor, copy/move operations",
	}, {
		t("struct "),
		i(1, "StructName"),
		t({ " {", "" }),
		-- 생성자
		t("\t"),
		i(1),
		t("("),
		i(2, "parameters"),
		t(")"),
		t({ " {", "\t\t" }),
		i(3, "// Constructor body"),
		t({ "", "\t}" }),
		-- 소멸자
		t({ "", "\t~" }),
		i(1),
		t({ "() {", "\t\t" }),
		i(4, "// Destructor body"),
		t({ "", "\t}" }),
		-- 복사 생성자
		t({ "", "\t" }),
		i(1),
		t("(const "),
		i(1),
		t("& other)"),
		t({ " {", "\t\t" }),
		i(5, "// Copy constructor body"),
		t({ "", "\t}" }),
		-- 복사 대입 연산자
		t({ "", "\t" }),
		i(1),
		t("& operator=(const "),
		i(1),
		t("& other)"),
		t({ " {", "\t\t" }),
		i(6, "// Copy assignment body"),
		t({ "", "\t}" }),
		-- 이동 생성자
		t({ "", "\t" }),
		i(1),
		t("("),
		i(1),
		t("&& other) noexcept"),
		t({ " {", "\t\t" }),
		i(7, "// Move constructor body"),
		t({ "", "\t}" }),
		-- 이동 대입 연산자
		t({ "", "\t" }),
		i(1),
		t("& operator=("),
		i(1),
		t("&& other) noexcept"),
		t({ " {", "\t\t" }),
		i(8, "// Move assignment body"),
		t({ "", "\t}" }),
		-- 추가 멤버
		t({ "", "\t" }),
		i(9, "// Members"),
		t({ "", "};" }),
		i(0),
	}),
}
